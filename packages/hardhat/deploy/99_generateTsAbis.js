"use strict";
/**
 * DON'T MODIFY OR DELETE THIS SCRIPT (unless you know what you're doing)
 *
 * This script generates the file containing the contracts Abi definitions.
 * These definitions are used to derive the types needed in the custom scaffold-eth hooks, for example.
 * This script should run as the last deploy script.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs = __importStar(require("fs"));
const prettier_1 = __importDefault(require("prettier"));
const generatedContractComment = `
/**
 * This file is autogenerated by Scaffold-ETH.
 * You should not edit it manually or your changes might be overwritten.
 */
`;
const DEPLOYMENTS_DIR = "./deployments";
const ARTIFACTS_DIR = "./artifacts";
function getDirectories(path) {
    return fs
        .readdirSync(path, { withFileTypes: true })
        .filter(dirent => dirent.isDirectory())
        .map(dirent => dirent.name);
}
function getContractNames(path) {
    return fs
        .readdirSync(path, { withFileTypes: true })
        .filter(dirent => dirent.isFile() && dirent.name.endsWith(".json"))
        .map(dirent => dirent.name.split(".")[0]);
}
function getActualSourcesForContract(sources, contractName) {
    for (const sourcePath of Object.keys(sources)) {
        const sourceName = sourcePath.split("/").pop()?.split(".sol")[0];
        if (sourceName === contractName) {
            const contractContent = sources[sourcePath].content;
            const regex = /contract\s+(\w+)\s+is\s+([^{}]+)\{/;
            const match = contractContent.match(regex);
            if (match) {
                const inheritancePart = match[2];
                // Split the inherited contracts by commas to get the list of inherited contracts
                const inheritedContracts = inheritancePart.split(",").map(contract => `${contract.trim()}.sol`);
                return inheritedContracts;
            }
            return [];
        }
    }
    return [];
}
function getInheritedFunctions(sources, contractName) {
    const actualSources = getActualSourcesForContract(sources, contractName);
    const inheritedFunctions = {};
    for (const sourceContractName of actualSources) {
        const sourcePath = Object.keys(sources).find(key => key.includes(`/${sourceContractName}`));
        if (sourcePath) {
            const sourceName = sourcePath?.split("/").pop()?.split(".sol")[0];
            const { abi } = JSON.parse(fs.readFileSync(`${ARTIFACTS_DIR}/${sourcePath}/${sourceName}.json`).toString());
            for (const functionAbi of abi) {
                if (functionAbi.type === "function") {
                    inheritedFunctions[functionAbi.name] = sourcePath;
                }
            }
        }
    }
    return inheritedFunctions;
}
function getContractDataFromDeployments() {
    if (!fs.existsSync(DEPLOYMENTS_DIR)) {
        throw Error("At least one other deployment script should exist to generate an actual contract.");
    }
    const output = {};
    for (const chainName of getDirectories(DEPLOYMENTS_DIR)) {
        const chainId = fs.readFileSync(`${DEPLOYMENTS_DIR}/${chainName}/.chainId`).toString();
        const contracts = {};
        for (const contractName of getContractNames(`${DEPLOYMENTS_DIR}/${chainName}`)) {
            const { abi, address, metadata } = JSON.parse(fs.readFileSync(`${DEPLOYMENTS_DIR}/${chainName}/${contractName}.json`).toString());
            const inheritedFunctions = getInheritedFunctions(JSON.parse(metadata).sources, contractName);
            contracts[contractName] = { address, abi, inheritedFunctions };
        }
        output[chainId] = contracts;
    }
    return output;
}
/**
 * Generates the TypeScript contract definition file based on the json output of the contract deployment scripts
 * This script should be run last.
 */
const generateTsAbis = async function () {
    const TARGET_DIR = "../nextjs/contracts/";
    const allContractsData = getContractDataFromDeployments();
    const fileContent = Object.entries(allContractsData).reduce((content, [chainId, chainConfig]) => {
        return `${content}${parseInt(chainId).toFixed(0)}:${JSON.stringify(chainConfig, null, 2)},`;
    }, "");
    if (!fs.existsSync(TARGET_DIR)) {
        fs.mkdirSync(TARGET_DIR);
    }
    fs.writeFileSync(`${TARGET_DIR}deployedContracts.ts`, await prettier_1.default.format(`${generatedContractComment} import { GenericContractsDeclaration } from "~~/utils/scaffold-eth/contract"; \n\n
 const deployedContracts = {${fileContent}} as const; \n\n export default deployedContracts satisfies GenericContractsDeclaration`, {
        parser: "typescript",
    }));
    console.log(`üìù Updated TypeScript contract definition file on ${TARGET_DIR}deployedContracts.ts`);
};
exports.default = generateTsAbis;
// Tags are useful if you have multiple deploy files and only want to run one of them.
// e.g. yarn deploy --tags generateTsAbis
generateTsAbis.tags = ["generateTsAbis"];
generateTsAbis.runAtTheEnd = true;
